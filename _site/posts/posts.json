[
  {
    "path": "posts/2022-01-17-dados-bcb-com-python/",
    "title": "Obtendo Dados do BCB com Python",
    "description": "Obter os dados para anÃ¡lise de forma simples Ã© fundamental e necessÃ¡rio.",
    "author": [
      {
        "name": "Wilson Freitas",
        "url": {}
      }
    ],
    "date": "2022-01-17",
    "categories": [
      "Python",
      "bcb",
      "opendata"
    ],
    "contents": "\r\nObter os dados para anÃ¡lise de forma simples Ã© fundamental e necessÃ¡rio.\r\nDepois de passar alguns anos mantendo o pacote {rbcb} que faz a integraÃ§Ã£o do R com as APIs de dados abertos do Banco Central, decidi fazer o port para Python.\r\nEm parte porque o PyPI (Python Package Index - repositÃ³rio de pacotes do Python) Ã© bem menos burocrÃ¡tico que o CRAN (repositÃ³rio de pacote do R), mas nos Ãºltimos anos tenho mexido mais com Python e fazia sentido portar algumas ferramentas.\r\nO pacote {python-bcb} Ã© a contraparte em Python do pacote {rbcb} do R.\r\nSÃ³ que acabou ficando maior, nÃ£o por causa do Python, mas por que eu estava com tempo e paciÃªncia e acabei implementando parte da especificaÃ§Ã£o OData. Isso permite de forma bem simples integrar diversas APIs do Banco Central que implementam essa especificaÃ§Ã£o. Na minha Ãºltima contagem tinha 39 APIs nessa estrutura.\r\nO pacote {python-bcb} traz as seguintes APIs:\r\nSGS\r\nSÃ©ries de Moedas do Conversor de Moedas do Banco Central\r\nExpectativas do FOCUS\r\nBoletins da PTAX (abertura, 3 intradiÃ¡rios, fechamento)\r\nDados selecionados de instituiÃ§Ãµes financeiras (IFDATA)\r\nAgora o que dÃ¡ mais trabalho ao fazer a integraÃ§Ã£o de uma API Ã© escrever a documentaÃ§Ã£oðŸ˜‰ dado que as APIs nÃ£o sÃ£o padronizadas.\r\nVou comunicando aqui na medida que novas APIs forem sendo integradas.\r\nObviamente espero todo o tipo de comentÃ¡rios e sugestÃµes.\r\nDocumentaÃ§Ã£o do projeto: https://wilsonfreitas.github.io/python-bcb/index.html\r\nLink do projeto: https://github.com/wilsonfreitas/python-bcb\r\nNa imagem segue um exemplo que como utilizar a API de Expectativas do FOCUS para obter um DataFrame das expectativas de IPCA de 2021 ao longo de 2021.\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/2022-01-17-dados-bcb-com-python/expectativas.png",
    "last_modified": "2022-06-03T06:11:37-03:00",
    "input_file": {},
    "preview_width": 1328,
    "preview_height": 856
  },
  {
    "path": "posts/2022-06-03-expectativas-focus-com-rbcb/",
    "title": "Expectativas FOCUS com rbcb",
    "description": "Como obter os dados das expectativas de mercado divulgadas no relatÃ³rio FOCUS\ndo Banco Central utilizando R.",
    "author": [
      {
        "name": "Wilson Freitas",
        "url": {}
      }
    ],
    "date": "2021-12-23",
    "categories": [],
    "contents": "\r\n\r\n\r\nlibrary(dplyr)\r\nlibrary(ggplot2)\r\nlibrary(rbcb)\r\n\r\n\r\n\r\n\r\n\r\nget_market_expectations |> args()\r\n\r\n\r\nfunction (type = c(\"annual\", \"quarterly\", \"monthly\", \"inflation-12-months\", \r\n    \"top5s-monthly\", \"top5s-annual\", \"institutions\", \"selic\", \r\n    \"top5s-selic\"), indic = NULL, start_date = NULL, end_date = NULL, \r\n    keep_names = TRUE, ...) \r\nNULL\r\n\r\n\r\n\r\ndf <- get_market_expectations(\"annual\", indic = \"IPCA\", start_date = \"2020-12-01\",\r\n                              `$filter` = \"(DataReferencia eq '2021' or DataReferencia eq '2022') and baseCalculo eq 0\")\r\ndf |> head()\r\n\r\n\r\n# A tibble: 6 x 11\r\n  Indicador IndicadorDetalhe Data       DataReferencia Media Mediana\r\n  <chr>     <lgl>            <date>     <chr>          <dbl>   <dbl>\r\n1 IPCA      NA               2020-12-01 2021            3.43    3.44\r\n2 IPCA      NA               2020-12-01 2022            3.4     3.5 \r\n3 IPCA      NA               2020-12-02 2021            3.43    3.44\r\n4 IPCA      NA               2020-12-02 2022            3.4     3.5 \r\n5 IPCA      NA               2020-12-03 2021            3.41    3.41\r\n6 IPCA      NA               2020-12-03 2022            3.4     3.5 \r\n# ... with 5 more variables: DesvioPadrao <dbl>, Minimo <dbl>,\r\n#   Maximo <dbl>, numeroRespondentes <int>, baseCalculo <int>\r\n\r\n\r\n\r\ndf |>\r\n  ggplot(aes(x = Data, y = Mediana, group = DataReferencia, colour = DataReferencia)) +\r\n  geom_line()\r\n\r\n\r\n\r\n\r\n\r\n\r\ndf |>\r\n  filter(DataReferencia == 2021) |>\r\n  mutate(Min = Media - DesvioPadrao, Max = Media + DesvioPadrao) |>\r\n  ggplot(aes(x = Data)) +\r\n  geom_line(aes(y = Mediana), colour = \"black\") +\r\n  geom_line(aes(y = Max), colour = \"grey\") +\r\n  geom_line(aes(y = Min), colour = \"grey\") +\r\n  geom_ribbon(aes(ymin = Min, ymax = Max), fill = \"blue\", alpha = 0.3)\r\n\r\n\r\n\r\n\r\nCoeficiente de variaÃ§Ã£o (CV)\r\n\r\n\r\ndf |>\r\n  filter(DataReferencia == 2021) |>\r\n  mutate(CV = Media / DesvioPadrao) |>\r\n  ggplot(aes(x = Data, y = CV)) +\r\n  geom_line()\r\n\r\n\r\n\r\n\r\n\r\n\r\ndf <- get_market_expectations(\"annual\", indic = \"PIB Total\", start_date = \"2020-12-01\",\r\n                              `$filter` = \"(DataReferencia eq '2021' or DataReferencia eq '2022') and baseCalculo eq 0\")\r\ndf |> head()\r\n\r\n\r\n# A tibble: 6 x 11\r\n  Indicador IndicadorDetalhe Data       DataReferencia Media Mediana\r\n  <chr>     <lgl>            <date>     <chr>          <dbl>   <dbl>\r\n1 PIB Total NA               2020-12-01 2021            3.43    3.46\r\n2 PIB Total NA               2020-12-01 2022            2.41    2.5 \r\n3 PIB Total NA               2020-12-02 2021            3.44    3.46\r\n4 PIB Total NA               2020-12-02 2022            2.42    2.5 \r\n5 PIB Total NA               2020-12-03 2021            3.41    3.46\r\n6 PIB Total NA               2020-12-03 2022            2.44    2.5 \r\n# ... with 5 more variables: DesvioPadrao <dbl>, Minimo <dbl>,\r\n#   Maximo <dbl>, numeroRespondentes <int>, baseCalculo <int>\r\n\r\n\r\n\r\ndf |>\r\n  ggplot(aes(x = Data, y = Mediana, group = DataReferencia, colour = DataReferencia)) +\r\n  geom_line()\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/2022-06-03-expectativas-focus-com-rbcb/expectativas-focus-com-rbcb_files/figure-html5/unnamed-chunk-4-1.png",
    "last_modified": "2022-06-04T10:41:49-03:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 768
  }
]
